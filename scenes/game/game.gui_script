local MATCHER = require "scenes.game.matcher.matcher"
local GOOEY = require "gooey.themes.dirtylarry.dirtylarry"
local COMMON = require "libs.common"
local WORLD = require "world.world"
local SM = require "libs.sm.sm"
---@class selfGameGui

---@param self selfGameGui
function init(self)
	COMMON.input_acquire("/gui#script")
	self.lbl_percent = gui.get_node("lbl_percent")
	gui.animate(gui.get_node("root"),gui.PROP_COLOR,vmath.vector4(1,1,1,1),gui.EASING_LINEAR,2,0.2)
end

---@param self selfGameGui
function final(self)
	COMMON.input_release()
end

---@param self selfGameGui
function update(self, dt)
	gui.set_color(self.lbl_percent,vmath.vector3(0.95,0.95,0.95,1))
	gui.set_text(self.lbl_percent,string.format("%.1f%% из %.f%%",  MATCHER.percent * 100,WORLD.lvl.targets[1] * 100))
	local current_idx = 1
	for i,target in ipairs(WORLD.lvl.targets) do
		local n_star = gui.get_node("star_"..i)
		if MATCHER.percent >= target then
			current_idx = i+1
			gui.set_color(n_star,vmath.vector3(0,1,0,1))
			gui.set_text(self.lbl_percent,string.format("%.1f%% из %.f%%",  MATCHER.percent * 100,target * 100))
		else
			gui.set_color(n_star,vmath.vector3(0.95,0.95,0.95,1))
		end
		if MATCHER.percent >= target and i == 3 then
			gui.set_color(self.lbl_percent,vmath.vector3(0,1,0,1))
		end
	end
	gui.set_text(self.lbl_percent,string.format("%.1f%% из %.f%%",  MATCHER.percent * 100,WORLD.lvl.targets[math.min(current_idx,3)] * 100))
end

---@param self selfGameGui
function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

---@param self selfGameGui
function on_input(self, action_id, action)
	local group = GOOEY.group("group1", function()
		GOOEY.button("btn_accept", action_id, action, function(button)
			WORLD.rx:onNext(WORLD.COMMANDS.BTN_ACCEPTED)
		end)
		GOOEY.button("btn_mirror", action_id, action, function(button)
			WORLD.rx:onNext(WORLD.COMMANDS.BTN_MIRROR)
		end)
		GOOEY.button("btn_restart", action_id, action, function(button)
			WORLD.rx:onNext(WORLD.COMMANDS.BTN_RESTART)
			SM:reload()
		end)
		GOOEY.button("btn_cancel", action_id, action, function(button)
			WORLD.rx:onNext(WORLD.COMMANDS.BTN_CANCEL)
			--SM:reload()
		end)
		GOOEY.button("btn_left", action_id, action, function(button)
			WORLD.rx:onNext(WORLD.COMMANDS.BTN_LOAD_PREV)
			return true
		end)
		GOOEY.button("btn_right", action_id, action, function(button)
			WORLD.rx:onNext(WORLD.COMMANDS.BTN_LOAD_NEXT)
			return true
		end)
		-- and so on
	end)
	return group.consumed
end

---@param self selfGameGui
function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
